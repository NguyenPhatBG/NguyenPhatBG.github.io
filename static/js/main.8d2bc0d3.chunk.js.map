{"version":3,"sources":["components/TaskForm.js","components/Search.js","components/Sort.js","components/SearchAndSort.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCloseForm","onChangeValue","event","target","name","value","setState","defineProperty","onClearForm","status","onSubmit","preventDefault","state","id","taskEditing","nextProps","react_default","a","createElement","className","onClick","type","onChange","required","Component","Search","onSearch","keyword","placeholder","Sort","sortBy","sortValue","onSort","_this2","_this$props","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","SearchAndSort","components_Search","components_Sort","TaskItem","onUpdateStatus","task","onDeleteItem","onUpdateItem","index","statusClass","textStatus","TaskList","onFilter","filterName","filterStatus","tasks","_this$state","elmListItem","map","components_TaskItem","key","App","onToggleForm","isDisplayForm","prevState","onShowForm","item","findIndex","localStorage","setItem","JSON","stringify","uuid","newTasks","concat","toConsumableArray","taskId","filter","itemEdit","find","filterState","toLowerCase","indexOf","sort","b","elmTaskForm","components_TaskForm","addTaskClass","components_SearchAndSort","components_TaskList","getItem","parse","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d2bc0d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TaskForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            name: '',\r\n            status: false\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.taskEditing) {\r\n            this.setState({\r\n                id: this.props.taskEditing.id,\r\n                name: this.props.taskEditing.name,\r\n                status: this.props.taskEditing.status\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps && nextProps.taskEditing) {\r\n            this.setState({\r\n                id: nextProps.taskEditing.id,\r\n                name: nextProps.taskEditing.name,\r\n                status: nextProps.taskEditing.status\r\n            });\r\n        } else if (!nextProps.taskEditing) {\r\n            this.setState({\r\n                id: '',\r\n                name: '',\r\n                status: false\r\n            });\r\n        }\r\n    }\r\n\r\n    onCloseForm = () => {\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    onChangeValue = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        if (name === 'status') {\r\n            value = target.value === 'true' ? true : false;\r\n        }\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    onClearForm = () => {\r\n        this.setState({ name: '', status: false });\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state);\r\n        this.onClearForm();\r\n        this.onCloseForm();\r\n    }\r\n\r\n    render () {\r\n        var { id } = this.state;\r\n        return (\r\n            <div className=\"panel panel-warning\">\r\n                <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title\">\r\n                        {id ? \"Cập Nhật Công Việc\" : \"Thêm Công Việc\"}\r\n                        <span \r\n                            className=\"fa fa-times-circle text-right\"\r\n                            onClick={this.onCloseForm}\r\n                        ></span>\r\n                    </h3>\r\n                </div>\r\n                <div className=\"panel-body\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label>Tên :</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                className=\"form-control\" \r\n                                name=\"name\"\r\n                                value={this.state.name}\r\n                                onChange={this.onChangeValue}\r\n                            />\r\n                        </div>\r\n                        <label>Trạng Thái :</label>\r\n                        <select \r\n                            className=\"form-control\" \r\n                            required=\"required\"\r\n                            name=\"status\"\r\n                            value={this.state.status}\r\n                            onChange={this.onChangeValue}\r\n                        >\r\n                            <option value={true}>Kích Hoạt</option>\r\n                            <option value={false}>Ẩn</option>\r\n                        </select>\r\n                        <br/>\r\n                        <div className=\"text-center\">\r\n                            <button type=\"submit\" className=\"btn btn-warning\">{id ? 'Cập nhật' : \"Thêm\"}</button>&nbsp;\r\n                            <button type=\"submit\" className=\"btn btn-danger\" onClick={this.onClearForm}>Hủy Bỏ</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      keyword: ''\r\n    }\r\n  }\r\n\r\n  onChange = (event) => {\r\n    var target = event.target;\r\n    var name = target.name;\r\n    var value = target.value;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  onSearch = () => {\r\n    this.props.onSearch(this.state.keyword);\r\n  }\r\n\r\n  render () {\r\n    var { keyword } = this.state;\r\n    return (\r\n        <div className=\"input-group\">\r\n            <input \r\n              type=\"text\" \r\n              className=\"form-control\" \r\n              placeholder=\"Nhập từ khóa...\" \r\n              name=\"keyword\"\r\n              value={keyword}\r\n              onChange={this.onChange}\r\n            />\r\n            <span className=\"input-group-btn\">\r\n            <button \r\n              className=\"btn btn-primary\" \r\n              type=\"button\"\r\n              onClick={this.onSearch}\r\n            >\r\n                <span className=\"fa fa-search mr-5\"></span>Tìm\r\n            </button>\r\n            </span>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\n\r\nclass Sort extends Component {\r\n    onClick = (sortBy, sortValue) => {\r\n        this.props.onSort(sortBy, sortValue); \r\n    }\r\n    render () {\r\n        var { sortBy, sortValue } = this.props;\r\n        return (\r\n            <div className=\"dropdown\">\r\n                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                    Sắp Xếp <span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n                </button>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                    <li onClick={() => this.onClick('name', 1)}>\r\n                        <a role=\"button\" className={(sortBy === 'name' && sortValue === 1) ? \"sort_selected\" : \"\"}>\r\n                            <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                Tên A-Z\r\n                            </span>\r\n                        </a>\r\n                    </li>\r\n                    <li onClick={() => this.onClick('name', -1)}>\r\n                        <a role=\"button\" className={(sortBy === 'name' && sortValue === -1) ? \"sort_selected\" : \"\"}>\r\n                            <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n                                Tên Z-A\r\n                            </span>\r\n                        </a>\r\n                    </li>\r\n                    <li role=\"separator\" className=\"divider\"></li>\r\n                    <li onClick={() => this.onClick('status', 1)}>\r\n                        <a role=\"button\" className={(sortBy === 'status' && sortValue === 1) ? \"sort_selected\" : \"\"}>\r\n                            Trạng Thái Kích Hoạt\r\n                        </a>\r\n                    </li>\r\n                    <li onClick={() => this.onClick('status', -1)}>\r\n                        <a role=\"button\" className={(sortBy === 'status' && sortValue === -1) ? \"sort_selected\" : \"\"}>\r\n                            Trạng Thái Ẩn\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sort;\r\n","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\n\r\nclass SearchAndSort extends Component {\r\n  render () {\r\n    return (\r\n        <div className=\"row mt-15\">\r\n        {/** Search */}\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <Search onSearch={this.props.onSearch} />\r\n            </div>\r\n         {/** Sort */}\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n               <Sort onSort={this.props.onSort} sortBy={this.props.sortBy} sortValue={this.props.sortValue} />\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchAndSort;\r\n","import React, { Component } from 'react';\r\n\r\nclass TaskItem extends Component {\r\n    onUpdateStatus = () => {\r\n        this.props.onUpdateStatus(this.props.task.id);\r\n    }\r\n    onDeleteItem = () => {\r\n        this.props.onDeleteItem(this.props.task.id);\r\n    }\r\n    onUpdateItem = () => {\r\n        this.props.onUpdateItem(this.props.task.id);\r\n    }\r\n    render() {\r\n        var { task, index } = this.props;\r\n        let statusClass = 'label label-danger';\r\n        let textStatus = 'Ẩn';\r\n        if (task.status) {\r\n            statusClass = 'label label-success';\r\n            textStatus = 'Kích Hoạt';\r\n        }\r\n        return (\r\n            <tr>\r\n                <td>{index + 1}</td>\r\n                <td>{task.name}</td>\r\n                <td className=\"text-center\">\r\n                    <span className={statusClass} onClick={this.onUpdateStatus}>\r\n                        {textStatus}\r\n                    </span>\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"btn btn-warning\"\r\n                        onClick={this.onUpdateItem}\r\n                    >\r\n                        <span className=\"fa fa-pencil mr-5\"></span>Sửa\r\n                    </button>\r\n                    &nbsp;\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"btn btn-danger\"\r\n                        onClick={this.onDeleteItem}\r\n                    >\r\n                        <span className=\"fa fa-trash mr-5\"></span>Xóa\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskItem;","import React, { Component } from 'react';\r\nimport { map } from 'lodash';\r\nimport TaskItem from './TaskItem';\r\n\r\nclass TaskList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filterName: '',\r\n            filterStatus: -1 // all: -1, active: 1, deactive: 0\r\n        }\r\n    }\r\n\r\n    onChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        this.props.onFilter(\r\n            name === 'filterName' ? value : this.state.filterName,\r\n            name === 'filterStatus' ? value : this.state.filterStatus\r\n        );\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var { tasks } = this.props;\r\n        var { filterName, filterStatus } = this.state;\r\n        var elmListItem = map(tasks, (task, index) => (\r\n            <TaskItem \r\n                key={task.id} \r\n                index={index} \r\n                task={task} \r\n                onUpdateStatus={this.props.onUpdateStatus} \r\n                onDeleteItem={this.props.onDeleteItem} \r\n                onUpdateItem={this.props.onUpdateItem}\r\n            />\r\n        ));\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                    <table className=\"table table-bordered table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"text-center\">STT</th>\r\n                                <th className=\"text-center\">Tên</th>\r\n                                <th className=\"text-center\">Trạng Thái</th>\r\n                                <th className=\"text-center\">Hành Động</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td></td>\r\n                                <td>\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        className=\"form-control\" \r\n                                        name=\"filterName\"\r\n                                        value={filterName}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <select \r\n                                        className=\"form-control\" \r\n                                        name=\"filterStatus\" \r\n                                        value={filterStatus} \r\n                                        onChange={this.onChange}\r\n                                    >\r\n                                        <option value=\"-1\">Tất Cả</option>\r\n                                        <option value=\"0\">Ẩn</option>\r\n                                        <option value=\"1\">Kích Hoạt</option>\r\n                                    </select>\r\n                                </td>\r\n                                <td></td>\r\n                            </tr>\r\n                            {elmListItem}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\nimport uuid from 'uuid/v1';\nimport { findIndex, filter, find } from 'lodash';\nimport TaskForm from './components/TaskForm';\nimport SearchAndSort from './components/SearchAndSort';\nimport TaskList from './components/TaskList';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [],\n            isDisplayForm: false,\n            taskEditing: null,\n            filterState: {\n                name: '',\n                status: -1\n            },\n            keyword: '',\n            sortBy: 'name',\n            sortValue: 1\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        // instead of componentWillMount\n        if (localStorage && localStorage.getItem('tasks')) {\n            var tasks = JSON.parse(localStorage.getItem('tasks'));\n            return {\n                tasks: tasks\n            };\n        }\n        return null;\n    }\n\n    onToggleForm = () => {\n        if (this.state.isDisplayForm && this.state.taskEditing) {\n            this.setState({\n                isDisplayForm: true,\n                taskEditing: null\n            });\n        } else {\n            this.setState(prevState => ({\n                isDisplayForm: !prevState.isDisplayForm,\n                taskEditing: null\n            }));\n        }\n    }\n\n    onCloseForm = () => {\n        this.setState({ isDisplayForm: false });\n    }\n\n    onShowForm = () => {\n        this.setState({ isDisplayForm: true });\n    }\n\n    onSubmit = (item) => {\n        var { tasks } = this.state;\n        if (item.id) {\n            var index = findIndex(tasks, (task) => task.id === item.id);\n            if (~index) {\n                tasks[index] = item; \n                localStorage.setItem('tasks', JSON.stringify(tasks));\n            }\n            this.onCloseForm();\n        } else {\n            item.id = uuid();\n            let newTasks = [...tasks, item];\n            this.setState({ tasks: newTasks });\n            localStorage.setItem('tasks', JSON.stringify(newTasks));\n        }\n    }\n\n    onUpdateStatus = (taskId) => {\n        var { tasks } = this.state;\n        let index = findIndex(tasks, (item) => item.id === taskId);\n        if (index !== -1) {\n            tasks[index].status = !tasks[index].status;\n            this.setState({ tasks });\n            localStorage.setItem('tasks', JSON.stringify(tasks));\n        }\n    }\n\n    onDeleteItem = (taskId) => {\n        var { tasks } = this.state;\n        var newTasks = filter(tasks, (item) => item.id !== taskId);\n        this.setState({ tasks: newTasks });\n        localStorage.setItem('tasks', JSON.stringify(newTasks));\n        this.onCloseForm();\n    }\n\n    onUpdateItem = (taskId) => {\n        var { tasks } = this.state;\n        var itemEdit = find(tasks, (item) => item.id === taskId);\n        this.setState({ taskEditing: itemEdit });\n        this.onShowForm();\n    }\n\n    onFilter = (filterName, filterStatus) => {\n        this.setState({\n            filterState: {\n                name: filterName.toLowerCase(),\n                status: +filterStatus\n            }\n        });\n    }\n\n    onSearch = (keyword) => {\n        this.setState({ keyword });\n    }\n\n    onSort = (sortBy, sortValue) => {\n        this.setState({ sortBy, sortValue });\n    }\n\n    render () {\n        var { tasks, isDisplayForm, taskEditing, filterState, keyword, sortBy, sortValue } = this.state;\n        if (filterState) {\n            // filter follow name\n            if (filterState.name) {\n                tasks = filter(tasks, (task) => task.name.toLowerCase().indexOf(filterState.name) !== -1);\n            }\n             // filter follow selected\n            tasks = filter(tasks, (task) => {\n                if (filterState.status === -1) {\n                    return task;\n                } else {\n                    return task.status === (filterState.status === 1 ? true : false);\n                }\n            });\n        }\n        if (keyword) {\n            tasks = filter(tasks, (task) => task.name.toLowerCase().indexOf(keyword) !== -1);\n        }\n        if (sortBy === \"name\") {\n            tasks.sort((a, b) => {\n                if (a.name > b.name) return sortValue;\n                else if (a.name < b.name) return -sortValue;\n                else return 0;\n            });\n        } else {\n            tasks.sort((a, b) => {\n                if (a.status > b.status) return -sortValue;\n                else if (a.status < b.status) return sortValue;\n                else return 0;\n            });\n        }\n        var elmTaskForm = isDisplayForm ? (\n            <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\"> \n                <TaskForm onSubmit={this.onSubmit} onCloseForm={this.onCloseForm} taskEditing={taskEditing} />\n            </div>\n        ) : null;\n        let addTaskClass = 'col-xs-8 col-sm-8 col-md-8 col-lg-8';\n        if (!isDisplayForm) {\n            addTaskClass = 'col-xs-12 col-sm-12 col-md-12 col-lg-12';\n        }\n        return (\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>Quản Lý Công Việc</h1>\n                    <hr/>\n                </div>\n                <div className=\"row\">\n                    {/** Form */}\n                    {elmTaskForm}\n                    <div className={addTaskClass}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.onToggleForm}>\n                            <span className=\"fa fa-plus mr-5\"></span>Thêm Công Việc\n                        </button>\n                        {/** Search - Sort */}\n                            <SearchAndSort \n                                onSearch={this.onSearch} \n                                onSort={this.onSort}\n                                sortBy={sortBy}\n                                sortValue={sortValue}\n                            />\n                        {/** List */}\n                            <TaskList \n                                tasks={tasks} \n                                onUpdateStatus={this.onUpdateStatus} \n                                onDeleteItem={this.onDeleteItem} \n                                onUpdateItem={this.onUpdateItem}\n                                onFilter={this.onFilter}\n                            />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}